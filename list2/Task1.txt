{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Task1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Model jÄ™zykowy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "authors = [\"orzeszkowej\", \"prusa\", \"sienkiewicza\"]\n",
    "\n",
    "punct_marks = \",.?!:'-()\"\n",
    "\n",
    "bigrams = {}\n",
    "\n",
    "\n",
    "for author in authors:\n",
    "    bigrams[author] = {}\n",
    "    \n",
    "    for line in open(\"../resources/dane_pozytywistyczne/korpus_\"+author+\".txt\"):\n",
    "        prev = \"<BOS>\"\n",
    "        if not line.strip():\n",
    "            continue\n",
    "        for word in (line.lower() + \" <EOS>\").split():\n",
    "            \n",
    "            if word[-1] in punct_marks:\n",
    "                new_word = word[-1]\n",
    "                word = word[:-1]\n",
    "            \n",
    "            else:\n",
    "                new_word = None\n",
    "            \n",
    "            if prev not in bigrams[author]:\n",
    "                bigrams[author][prev] = {}\n",
    "            \n",
    "            if word not in bigrams[author][prev]:\n",
    "                bigrams[author][prev][word] = 1\n",
    "            else:\n",
    "                bigrams[author][prev][word] += 1\n",
    "            \n",
    "            if new_word:\n",
    "                if word not in bigrams[author]:\n",
    "                    bigrams[author][word] = {}\n",
    "                \n",
    "                if new_word not in bigrams[author][word]:\n",
    "                    bigrams[author][word][new_word] = 1\n",
    "                else:\n",
    "                    bigrams[author][word][new_word] += 1\n",
    "                \n",
    "                prev = new_word\n",
    "            else:\n",
    "                prev = word\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "# normalize\n",
    "import math\n",
    "\n",
    "best = 0\n",
    "\n",
    "for author in bigrams:\n",
    "    for prev in bigrams[author]:\n",
    "        all_bigrams = math.log(sum(bigrams[author][prev].values()))\n",
    "        for word, value in bigrams[author][prev].items():\n",
    "            bigrams[author][prev][word] = math.log(value) - all_bigrams\n",
    "        bigrams[author][prev][\"#unigram#\"] = all_bigrams\n",
    "        best = max(best, all_bigrams)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dobre 73.33333333333333 %\n",
      "Dla orzeszkowej trafione 6/12\n",
      "Dla prusa trafione 21/21\n",
      "Dla sienkiewicza trafione 17/27\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "\n",
    "eps = -best*0.50 #strzelane tak, zeby bylo jak najlepiej - co ciekawe im blizej zera tym lepiej ocenia sienkiewicza kosztem innych\n",
    "\n",
    "\n",
    "hits = {author:0 for author in authors}\n",
    "size = {author:0 for author in authors}\n",
    "\n",
    "for file_name in os.listdir('../resources/dane_pozytywistyczne/testy1/'):\n",
    "    res = {}\n",
    "    for author in authors:\n",
    "        res[author] = 0 #p-stwo pustego to 1\n",
    "        if author in file_name:\n",
    "            size[author] += 1\n",
    "\n",
    "    for line in open('../resources/dane_pozytywistyczne/testy1/' + file_name):\n",
    "        for author in authors:\n",
    "            prev = \"<BOS>\"\n",
    "            if not line.strip():\n",
    "                continue\n",
    "            for word in (line.lower() + \" <EOS>\").split():\n",
    "\n",
    "                if word[-1] in punct_marks:\n",
    "                    new_word = word[-1]\n",
    "                    word = word[:-1]\n",
    "\n",
    "                else:\n",
    "                    new_word = None\n",
    "\n",
    "                if prev not in bigrams[author]:\n",
    "                    res[author] += eps\n",
    "                else:\n",
    "                    res[author] += bigrams[author][prev].get(word, eps)\n",
    "\n",
    "                if new_word:\n",
    "                    if word not in bigrams[author]:\n",
    "                        res[author] += eps\n",
    "                    else:\n",
    "                        res[author] += bigrams[author][word].get(new_word, eps)\n",
    "\n",
    "                    prev = new_word\n",
    "                else:\n",
    "                    prev = word\n",
    "    result = max(res.values())\n",
    "    for author in authors:\n",
    "        if result == res[author] and author in file_name:\n",
    "            hits[author] += 1\n",
    "            break\n",
    "\n",
    "print(\"Dobre\", sum(hits.values())/sum(size.values())*100, \"%\")\n",
    "for author in authors:\n",
    "    print(\"Dla {} trafione {}/{}\".format(author, hits[author],size[author]))\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
